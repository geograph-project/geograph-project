#
# Some template indexes that includes our more andvanced charset_table for dealing with most latin1 charactors

################################################

# Note: the 'source' will need: (the db_slave templates have them already!) 
#           sql_query_pre           = SET CHARACTER SET 'utf8'

# ... because sphinx/manticore only supports utf8 input. 

################################################

# basic index template for use with latin1 mysql tables. 

index latin1_encoded
{

	# new UTF8 codepoint charset_table, source: http://www.geograph.org.uk/stuff/unicode-audit.php?done=1&u=2

	#charset_type = utf-8

	ignore_chars = U+00B4, U+2019, U+2018, U+60, U+27

	charset_table = 0..9, A..Z->a..z, _, a..z \
		, U+00C3->a, U+00C1->a, U+00C0->a, U+00C7->c, U+00C9->e, U+00C8->e, U+00CD->i, U+00CC->i, U+00D2->o, U+00D3->o \
		, U+00D4->o, U+00E0->a, U+00E1->a, U+00E2->a, U+00E5->a, U+00E4->a, U+00C5->a, U+00E3->a, U+00E7->c, U+00EB->e \
		, U+00EA->e, U+00E9->e, U+00E8->e, U+00EC->i, U+00ED->i, U+00EE->i, U+00EF->i, U+00F1->n, U+00F3->o, U+00F4->o \
		, U+00F2->o, U+00F8->o, U+00F6->o, U+00F5->o, U+0160->s, U+0161->s, U+00FC->u, U+00FA->u, U+00D9->u, U+00DC->u \
		, U+00FB->u, U+00DA->u, U+00F9->u, U+00D7->x
}

################################################

# advanced template for use with latin1 mysql tables, that have unicode included via HTML Entities

index latin1plus_encoded
{

	# new UTF8 codepoint charset_table, with html_strip, source: http://www.geograph.org.uk/stuff/unicode-audit.php?done=1&u=1&strip=1

	html_strip = 1
	#charset_type = utf-8

	regexp_filter = \x{2122} => .tm.
	regexp_filter = \x{215b} => _125
	regexp_filter = \x{20ac} => .EUR.
	regexp_filter = \x{a9} => .copyright.
	regexp_filter = \x{b0} => .degree.
	regexp_filter = \x{ba} => .degree.
	regexp_filter = \x{a3} => .pound.
	regexp_filter = \x{ae} => .registered.
	regexp_filter = \x{2116} => No.
	regexp_filter = \x{bc} => _25
	regexp_filter = \x{bd} => _5
	regexp_filter = \x{be} => _75
	regexp_filter = \x{e6} => ae
	regexp_filter = \x{2640} => .female.
	regexp_filter = \x{2642} => .male.
	regexp_filter = \x{14b} => ng
	regexp_filter = \x{153} => oe
	regexp_filter = \x{3c9} => .omega.
	regexp_filter = \x{b2} => .squared.
	##regexp_filter = \x26 => .and.   -- turns out this breaks entities, that will get fixed by html_strip!

	ignore_chars = U+2192, U+2003, U+00B4, U+2019, U+2018, U+60, U+27, U+00AD

	charset_table = 0..9, A..Z->a..z, _, a..z \
		, U+2011->-, U+2082->2, U+00C3->a, U+00C1->a, U+00C0->a, U+00C7->c, U+00C9->e, U+00C8->e, U+00CD->i, U+00CC->i \
		, U+00D4->o, U+00D2->o, U+00D3->o, U+03CC->o, U+00E2->a, U+00E2->a, U+00E1->a, U+00E3->a, U+00E0->a, U+0430->a \
		, U+0391->a, U+0203->a, U+0103->a, U+00C5->a, U+00E4->a, U+00E5->a, U+0421->c, U+00E7->c, U+010B->c, U+010D->c \
		, U+0106->c, U+0107->c, U+0109->c, U+0111->d, U+1EC7->e, U+0397->e, U+0119->e, U+0113->e, U+00EA->e, U+0435->e \
		, U+0117->e, U+018E->e, U+00EB->e, U+00E8->e, U+00E9->e, U+0123->g, U+00EC->i, U+0438->i, U+00ED->i, U+0300->i \
		, U+0457->i, U+00EF->i, U+00EE->i, U+0131->i, U+041A->k, U+043B->l, U+013A->l, U+0142->l, U+039C->m, U+00F1->n \
		, U+0376->n, U+0418->n, U+00F2->o, U+00F3->o, U+039F->o, U+00F8->o, U+00F4->o, U+00F5->o, U+1F78->o, U+00F6->o \
		, U+042F->r, U+044F->r, U+0440->r, U+03A1->r, U+01A7->s, U+0161->s, U+015A->s, U+015B->s, U+0160->s, U+017F->s \
		, U+01A8->s, U+0442->t, U+03A4->t, U+0165->t, U+00D9->u, U+00FC->u, U+00F9->u, U+00FA->u, U+00DC->u, U+00FB->u \
		, U+00DA->u, U+0174->w, U+0175->w, U+00D7->x, U+0177->y, U+01B6->z, U+0179->z, U+017C->z

}
