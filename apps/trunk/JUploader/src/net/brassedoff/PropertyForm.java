/*
 * PropertyForm.java
 *
 * Created on 31 January 2007, 14:26
 */

package net.brassedoff;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;

/**
 *
 * @author  david
 */
public class PropertyForm extends javax.swing.JDialog implements ActionListener {
    
    /** Creates new form PropertyForm */
    public PropertyForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        // local initialisation
        
        chkResize.addActionListener(this);
        btnOk.addActionListener(this);
        btnCancel.addActionListener(this);
        
        // set up form initial conditions
        
        chkResize.setSelected(Main.doResize);
        pnlResizeOptions.setVisible(Main.doResize);
        if (Main.doResize) {
            txtLocation.setText(Main.cacheDirectory);
        }
        chkGridRef.setSelected(Main.gridrefFromImage);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        chkResize = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pnlResizeOptions = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtParam1 = new javax.swing.JTextField();
        txtParam2 = new javax.swing.JTextField();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        chkGridRef = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        chkResize.setText("Allow JUploader to resize images?");
        chkResize.setActionCommand("chkResize");
        chkResize.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkResize.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setText("Allowing JUploader to resize images will probably \nresult in faster uploads to the Geograph servers. JUploader\nwill keep a cache of resized images on your system.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Location for temporary (cache) directory");

        txtLocation.setColumns(40);

        jLabel2.setText("FIne tuning parameters for rescaling function");

        txtParam1.setColumns(5);

        txtParam2.setColumns(5);

        org.jdesktop.layout.GroupLayout pnlResizeOptionsLayout = new org.jdesktop.layout.GroupLayout(pnlResizeOptions);
        pnlResizeOptions.setLayout(pnlResizeOptionsLayout);
        pnlResizeOptionsLayout.setHorizontalGroup(
            pnlResizeOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlResizeOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlResizeOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtLocation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(pnlResizeOptionsLayout.createSequentialGroup()
                        .add(txtParam1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtParam2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlResizeOptionsLayout.setVerticalGroup(
            pnlResizeOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlResizeOptionsLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlResizeOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtParam1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtParam2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        btnOk.setText("Ok");

        btnCancel.setText("Cancel");

        chkGridRef.setText("Derive grid refs from image file name");
        chkGridRef.setToolTipText("If enabled, Juppy will try to extract a UK or Irish grid ref from the image file name");
        chkGridRef.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkGridRef.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(chkResize)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(btnCancel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 249, Short.MAX_VALUE)
                                .add(btnOk))
                            .add(layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
                            .add(chkGridRef)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(pnlResizeOptions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(chkGridRef)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chkResize)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlResizeOptions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 54, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnOk)
                    .add(btnCancel))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void actionPerformed(ActionEvent ae) {
        String action = ae.getActionCommand();
        
        if (action.equals("chkResize")) {
            // enable or disable the detail pane as appropriate
            
            if (chkResize.isSelected()) {
                pnlResizeOptions.setVisible(true);
            } else {
                pnlResizeOptions.setVisible(false);
            }
        } else if (action.equals("Ok")) {
            
            // validate the entries; if they're OK, copy to the top leve statics
            
            ValidateAndSave();
        } else if (action.equals("Cancel")) {
            
            // get out
            
            this.dispose();
            
        }
        
    }
    
    private final void ValidateAndSave() {
        
        // if the resize checkbox is ticked, there must be a cache
        // directory. Ideally, it could do with being valid...
        
        if (chkResize.isSelected()) {
            if (txtLocation.getText().equals("")) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "You should specify a cache directory");
                txtLocation.grabFocus();
                return;
            }
            
            // we should check the existence of the cache
            
            // first, it should be a valid directory
            File cache = new File(txtLocation.getText());
            if (!cache.isDirectory()) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Please enter a valid directory name");
                txtLocation.grabFocus();
                return;
            }
            
            // then, it should exist
            if (!cache.exists()) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "The cache directory doesn't exist\n" +
                        "Please create it outside of JUploader");
                txtLocation.grabFocus();
                return;
            }
            
            Main.doResize = true;
            Main.cacheDirectory = txtLocation.getText();
            
        } else {
            Main.doResize = false;
            Main.cacheDirectory = "";
        }
        
        Main.gridrefFromImage = chkGridRef.isSelected();        
        
        // done with this now...
        
        this.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox chkGridRef;
    private javax.swing.JCheckBox chkResize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel pnlResizeOptions;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtParam1;
    private javax.swing.JTextField txtParam2;
    // End of variables declaration//GEN-END:variables
    
}
