#adodb session table
create table sessions 
(
   SESSKEY char(32) not null,
   EXPIRY int(11) unsigned not null,
   EXPIREREF varchar(64),
   DATA text not null,
   primary key (sesskey)
);



create table gridsquare
(
   #primary key, used to identify the square internally
   gridsquare_id int not null auto_increment,

   #grid reference, used by site visitors
   grid_reference char(6) not null,
   
   #type of grid reference (keys into gridprefix table)
   reference_index tinyint default '1',

   #internal coordinate of square, used to locate square into a 2d space
   x int not null,
   y int not null,

   #indicator of whether square is water (0), land(100) or something inbetween.
   #handy for plotting squares to build a map
   percent_land tinyint not null default '100',

   #image count - this is an optimisation to allow us to easily find
   #occupied squares without a join
   imagecount int not null default '0',

   primary key(gridsquare_id),
   unique(grid_reference),
   index(x),
   index(y)
);


#holds prefix letters and extents of grid systems
create table gridprefix
(
	#is this used by grid_reference1 or grid_reference2?
	reference_index int not null,
	
	#prefix e.g. ST for GB grid
	prefix char(4) not null,
		
	#origin
	origin_x int not null,
	origin_y int not null,
	width int not null default 100,
	height int not null default 100,
	
	#title of square

	title varchar(128),
	
	#how many squares contain land?

	landcount int default '0',
	
	primary key(reference_index,prefix)

);

#OSGB Grid
#set up grids from bottom to top
replace into gridprefix(prefix, reference_index, origin_x,origin_y) values
('SV',1,000,0),
('SW',1,100,0),
('SX',1,200,0),
('SY',1,300,0),
('SZ',1,400,0),
('TV',1,500,0),
('TW',1,600,0),

('SQ',1,000,100),
('SR',1,100,100),
('SS',1,200,100),
('ST',1,300,100),
('SU',1,400,100),
('TQ',1,500,100),
('TR',1,600,100),

('SL',1,000,200),
('SM',1,100,200),
('SN',1,200,200),
('SO',1,300,200),
('SP',1,400,200),
('TL',1,500,200),
('TM',1,600,200),

('SF',1,000,300),
('SG',1,100,300),
('SH',1,200,300),
('SJ',1,300,300),
('SK',1,400,300),
('TF',1,500,300),
('TG',1,600,300),

('SA',1,000,400),
('SB',1,100,400),
('SC',1,200,400),
('SD',1,300,400),
('SE',1,400,400),
('TA',1,500,400),
('TB',1,600,400),

('NV',1,000,500),
('NW',1,100,500),
('NX',1,200,500),
('NY',1,300,500),
('NZ',1,400,500),
('OV',1,500,500),
('OW',1,600,500),

('NQ',1,000,600),
('NR',1,100,600),
('NS',1,200,600),
('NT',1,300,600),
('NU',1,400,600),
('OQ',1,500,600),
('OR',1,600,600),

('NL',1,000,700),
('NM',1,100,700),
('NN',1,200,700),
('NO',1,300,700),
('NP',1,400,700),
('OL',1,500,700),
('OM',1,600,700),

('NF',1,000,800),
('NG',1,100,800),
('NH',1,200,800),
('NJ',1,300,800),
('NK',1,400,800),
('OF',1,500,800),
('OG',1,600,800),

('NA',1,000,900),
('NB',1,100,900),
('NC',1,200,900),
('ND',1,300,900),
('NE',1,400,900),
('OA',1,500,900),
('OB',1,600,900),

('HV',1,000,1000),
('HW',1,100,1000),
('HX',1,200,1000),
('HY',1,300,1000),
('HZ',1,400,1000),
('JV',1,500,1000),
('JW',1,600,1000),

('HQ',1,000,1100),
('HR',1,100,1100),
('HS',1,200,1100),
('HT',1,300,1100),
('HU',1,400,1100),
('JQ',1,500,1100),
('JR',1,600,1100),

('HL',1,000,1200),
('HM',1,100,1200),
('HN',1,200,1200),
('HO',1,300,1200),
('HP',1,400,1200),
('JL',1,500,1200),
('JM',1,600,1200);

#now offset them for our internal coords
update gridprefix set origin_x=origin_x+206 where reference_index=1;

#give them a title
update gridprefix set title=concat('GB grid square ', prefix) 
where reference_index=1 and title is null;


replace into gridprefix(prefix, reference_index, origin_x,origin_y) values
('V',2,000,000),
('W',2,100,000),
('X',2,200,000),
('Y',2,300,000),
('Z',2,400,000),

('Q',2,000,100),
('R',2,100,100),
('S',2,200,100),
('T',2,300,100),
('U',2,400,100),

('L',2,000,200),
('M',2,100,200),
('N',2,200,200),
('O',2,300,200),
('P',2,400,200),

('F',2,000,300),
('G',2,100,300),
('H',2,200,300),
('J',2,300,300),
('K',2,400,300),

('A',2,000,400),
('B',2,100,400),
('C',2,200,400),
('D',2,300,400),
('E',2,400,400);

#lose the rightmost column, there's no land there
delete from gridprefix where origin_x=400 and reference_index=2;

#relocate onto our grid
update gridprefix set origin_x=origin_x+10,origin_y=origin_y+149 where reference_index=2;

#create pseudo titles
update gridprefix set title=concat('Irish grid square ', prefix) 
where reference_index=2 and title is null;

create table user
(
    user_id int not null auto_increment,

    #username and password
    password varchar(64),
    realname varchar(128),

    #verified email address
    email varchar(128),

    #link to users website
    website varchar(255),

    #user level - on email verification user is grant basic rights
    rights set('basic', 'admin'),

    #signup date used to weed out unverified users
    signup_date datetime,

    #nickname
    nickname varchar(128),

    #privacy flag
    public_email int default '0',

    primary key(user_id)
);



create table gridimage
(
    #unique id, forms basis of filename
    gridimage_id int not null auto_increment,

    #what square is this image for?
    gridsquare_id int not null,

    #what's the sequence number? 0 is first image
    seq_no int not null,

    #who submitted it?
    user_id int not null,

    #first to find this square? normally indicated by seq_no=0 but
    #separating the bits of information allows a better photograph to
    #be more prominent later
    ftf int not null,

    #what's the status
    moderation_status enum('pending', 'accepted', 'rejected'),

    #user submitted information
    title varchar(128),
    comment text,

    #exif headers as serialized array for now
    exif text,

    submitted datetime,

    primary key(gridimage_id),
    unique(gridsquare_id, seq_no),
    index(user_id)
);

#autologin system adopting practices outlined in
#http://fishbowl.pastiche.org/2004/01/19/persistent_login_cookie_best_practice
create table autologin
(
	user_id int not null,
	token char(32) not null,
	created timestamp,
	
	primary key(user_id,token)
);


#paul 10th March 2005 - altered the way we record the idea of a
#ftf - this is now an image which has been moderated as a geograph
#and the ordering of the enum items allows more logical ordering of
#images, e.g. order by moderation_status+0 desc,seq_no
alter table gridimage
change column moderation_status
moderation_status enum('rejected', 'pending', 'accepted', 'geograph');

#add column for recording whether a square has geographs
alter table gridsquare add column
has_geographs tinyint not null default '0';

#already moderated ftfs are geographs
update gridimage set moderation_status='geograph'
where ftf=1 and moderation_status='accepted';

#all pending images are ftf 0
update gridimage set ftf=0 where moderation_status='pending';



#barry 13th March 2005
ALTER TABLE `gridimage` ADD `nateastings` MEDIUMINT UNSIGNED DEFAULT '0' NOT NULL ,
ADD `natnorthings` MEDIUMINT UNSIGNED DEFAULT '0' NOT NULL ;

#barry 15th March
#for the moment imageclass is a varchar, but when remove other can make it enum
ALTER TABLE gridimage 
	ADD COLUMN imageclass VARCHAR( 32 ) NOT NULL,
	ADD INDEX ( imageclass ),
	ADD imagetaken DATE NOT NULL;

