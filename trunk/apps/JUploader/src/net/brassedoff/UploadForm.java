/*
 * UploadForm.java
 *
 * Created on 18 August 2006, 20:38
 */

package net.brassedoff;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * Main form that handles the uploading of a single image to the
 * Geograph server. The class does populates some of the dialogs with
 * data from the server (geographical category for instance)
 *
 * @author  david
 */
public class UploadForm extends javax.swing.JDialog implements ActionListener {

    public String [] editData = new String [20];
    public boolean acceptFlag;
    
    /** Creates new form UploadForm */
    public UploadForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents(); 
        
        // my initialisation stuff (listeners etc)
        btnImagefile.addActionListener(this);
        btnToday.addActionListener(this);
        btnReset.addActionListener(this);
        btnUpload.addActionListener(this);
        
        // fill the feature combobox
        cmbGeoFeature.removeAllItems();
        for (int i = 0; i < Main.imageClassList.length; i++) {
            cmbGeoFeature.addItem(Main.imageClassList[i]);
        }
        
        acceptFlag = false;
    }
    
    public void populateFields() {
        
        // populate the fields from the editData array (usually called prior
        // to an edit)
        
        txtImagefile.setText(editData[0]);
        txtSubject.setText(editData[1]);
        txtPhotographer.setText(editData[2]);
        cmbDirection.setSelectedItem(editData[3]);
        txtImageTitle.setText(editData[4]);
        txtImageComments.setText(editData[5]);
        cmbGeoFeature.setSelectedItem(editData[6]);
        txtPhotoDate.setText(editData[7]);
        chkSupplemental.setSelected(editData[8].equals("Y") ? true : false);
        chkCCLicence.setSelected(editData[9].equals("Y") ? true : false);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDirection = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        txtImagefile = new javax.swing.JTextField();
        txtSubject = new javax.swing.JTextField();
        txtPhotographer = new javax.swing.JTextField();
        txtImageTitle = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtImageComments = new javax.swing.JTextArea();
        cmbGeoFeature = new javax.swing.JComboBox();
        txtPhotoDate = new javax.swing.JTextField();
        btnToday = new javax.swing.JButton();
        btnImagefile = new javax.swing.JButton();
        chkSupplemental = new javax.swing.JCheckBox();
        chkCCLicence = new javax.swing.JCheckBox();

        setTitle("Geograph uploader");
        setBackground(java.awt.Color.lightGray);
        setResizable(false);
        jLabel2.setText("Subject grid reference:");

        jLabel3.setText("Photographer grid reference:");

        jLabel4.setText("View direction:");

        cmbDirection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "North", "NNE", "NE", "ENE", "East", "ESE", "SE", "SSE", "South", "SSW", "SW", "WSW", "West", "WNW", "NW", "NNW" }));

        jLabel5.setText("Image title:");

        jLabel6.setText("Comment:");

        jLabel7.setText("Primary geographical feature:");

        jLabel8.setText("Date photo taken:");

        btnUpload.setText("Add to queue");

        btnReset.setText("Reset");

        txtImagefile.setEnabled(false);

        txtImageComments.setColumns(20);
        txtImageComments.setRows(5);
        jScrollPane1.setViewportView(txtImageComments);

        cmbGeoFeature.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnToday.setText("Today");
        btnToday.setToolTipText("Use today's date for this image");

        btnImagefile.setText("Image file");

        chkSupplemental.setText("This is a supplemental image");
        chkSupplemental.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkSupplemental.setMargin(new java.awt.Insets(0, 0, 0, 0));

        chkCCLicence.setText("I agree to the use of the CC licence for this image");
        chkCCLicence.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkCCLicence.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chkCCLicence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .add(chkSupplemental, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(btnReset)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 190, Short.MAX_VALUE)
                        .add(btnUpload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel2)
                            .add(jLabel4)
                            .add(btnImagefile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbDirection, 0, 161, Short.MAX_VALUE)
                            .add(txtImagefile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtPhotographer)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtSubject, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jLabel6))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                            .add(txtImageTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel7)
                            .add(jLabel8))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(txtPhotoDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                                .add(btnToday))
                            .add(cmbGeoFeature, 0, 198, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtImagefile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnImagefile))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)
                        .add(17, 17, 17)
                        .add(jLabel4))
                    .add(layout.createSequentialGroup()
                        .add(txtSubject, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtPhotographer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbDirection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(txtImageTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jLabel6))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel7)
                        .add(17, 17, 17)
                        .add(jLabel8))
                    .add(layout.createSequentialGroup()
                        .add(cmbGeoFeature, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtPhotoDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnToday))))
                .add(14, 14, 14)
                .add(chkSupplemental)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chkCCLicence)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 38, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnReset)
                    .add(btnUpload))
                .add(22, 22, 22))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
 
    
    public final void actionPerformed(ActionEvent ae) {
        String action = ae.getActionCommand();
        
        if (action.equals("Image file")) {
            
            DisplayFileChooser();
            
        } else if (action.equals("Today")) {
            
                SetDateToday();
                
        } else if (action.equals("Reset")) {

            ResetFields();
            
        } else if (action.equals("Add to queue")) {

            ValidateAndAdd();
            
        }
    }
    
    final public void ResetFields() {

//        reset all the fields for restart

        acceptFlag = false;
        
        txtImageComments.setText("");
        txtImageTitle.setText("");
        txtImagefile.setText("");
        txtPhotoDate.setText("");
        txtPhotographer.setText("");
        txtSubject.setText("");
        chkSupplemental.setSelected(false);
        chkCCLicence.setSelected(false);
        btnImagefile.grabFocus();
    }
    
    final public void ValidateAndAdd() {
        
//        Validate the details and do the upload
        
        if (txtImagefile.getText().equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No image file specified");
            return;
        }
        
        if (!chkCCLicence.isSelected()) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Please check the Creative Commons\nlicence before continuing");
            return;
        }

        acceptFlag = true;
        
        // save all the fields
        
        editData[0] = new String(txtImagefile.getText());
        editData[1] = new String(txtSubject.getText());
        editData[2] = new String(txtPhotographer.getText());
        editData[3] = new String(cmbDirection.getSelectedItem().toString());
        editData[4] = new String(txtImageTitle.getText());
        editData[5] = new String(txtImageComments.getText());
        editData[6] = new String(cmbGeoFeature.getSelectedItem().toString());
        editData[7] = new String(txtPhotoDate.getText());
        editData[8] = new String(chkSupplemental.isSelected() ? "Y" : "N");
        editData[9] = new String(chkCCLicence.isSelected() ? "Y" : "N");
        editData[10] = new String();
        for (int i = 11; i < 20; i++) {
            editData[i] = new String("");
        }
            
        this.setVisible(false);
        
    }
    
    final public void SetDateToday() {
        // set today's date 
        
        String today = DateFormat.getDateInstance().format(new Date());
        txtPhotoDate.setText(today);
    }
    
    final public void DisplayFileChooser() {
//        Display a file chooser dialog for a jpg file
        JFileChooser fc = new JFileChooser();
        int rc = fc.showOpenDialog(this);
        if (rc == JFileChooser.APPROVE_OPTION) {
            
            String filePath = fc.getSelectedFile().getPath();
            txtImagefile.setText(filePath);
            
            // if the file name looks like a grid reference, we'll fill in the grid
            // ref as well and default the photographer position (someone will like it!)
            
            String fileName = fc.getSelectedFile().getName();
            String gridRef = null;
            Pattern ukGridRef = Pattern.compile("([A-Z]|[a-z]){2}\\d{4,6}");
            Matcher ukMatcher = ukGridRef.matcher(fileName);
            if (ukMatcher.find()) {
                int start = ukMatcher.start();
                int end = ukMatcher.end();
                gridRef = fileName.substring(start, end);
            } else {
                
                // could it be Irish?
                
                Pattern irGridRef = Pattern.compile("([A-Z]|[a-z]){1}\\d{4}");
                Matcher irMatcher = irGridRef.matcher(fileName);
                if (irMatcher.find()) {
                    int start = irMatcher.start();
                    int end = irMatcher.end();
                    gridRef = fileName.substring(start, end);
                }
                
            }
            if (gridRef != null) {
                txtSubject.setText(gridRef);
                txtPhotographer.setText(gridRef);
            }
            
        } else {
            txtImagefile.setText("");
            
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImagefile;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnToday;
    private javax.swing.JButton btnUpload;
    private javax.swing.JCheckBox chkCCLicence;
    private javax.swing.JCheckBox chkSupplemental;
    private javax.swing.JComboBox cmbDirection;
    private javax.swing.JComboBox cmbGeoFeature;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtImageComments;
    private javax.swing.JTextField txtImageTitle;
    private javax.swing.JTextField txtImagefile;
    private javax.swing.JTextField txtPhotoDate;
    private javax.swing.JTextField txtPhotographer;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables
    
}
